//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "power"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub name: String,
    pub r#type: String,
    pub code: Option<String>,
    pub url: Option<String>,
    pub open_type: Option<String>,
    pub parent_id: i32,
    pub icon: Option<String>,
    pub sort: i32,
    pub create_at: String,
    pub update_at: String,
    pub enable: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Name,
    Type,
    Code,
    Url,
    OpenType,
    ParentId,
    Icon,
    Sort,
    CreateAt,
    UpdateAt,
    Enable,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    RolePower,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Name => ColumnType::String(StringLen::N(255u32)).def(),
            Self::Type => ColumnType::String(StringLen::N(1u32)).def(),
            Self::Code => ColumnType::String(StringLen::N(30u32)).def().null(),
            Self::Url => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::OpenType => ColumnType::String(StringLen::N(10u32)).def().null(),
            Self::ParentId => ColumnType::Integer.def(),
            Self::Icon => ColumnType::String(StringLen::N(128u32)).def().null(),
            Self::Sort => ColumnType::Integer.def(),
            Self::CreateAt => ColumnType::custom("DATETIME").def(),
            Self::UpdateAt => ColumnType::custom("DATETIME").def(),
            Self::Enable => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::RolePower => Entity::has_many(super::role_power::Entity).into(),
        }
    }
}

impl Related<super::role_power::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RolePower.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
