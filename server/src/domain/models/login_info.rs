//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "login_info"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub info_id: i32,
    pub login_name: Option<String>,
    pub ip_addr: Option<String>,
    pub login_location: Option<String>,
    pub browser: Option<String>,
    pub os: Option<String>,
    pub status: Option<String>,
    pub msg: Option<String>,
    pub login_time: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    InfoId,
    LoginName,
    IpAddr,
    LoginLocation,
    Browser,
    Os,
    Status,
    Msg,
    LoginTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    InfoId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::InfoId => ColumnType::Integer.def(),
            Self::LoginName => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::IpAddr => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::LoginLocation => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::Browser => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::Os => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::Status => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::Msg => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::LoginTime => ColumnType::custom("datetime").def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
