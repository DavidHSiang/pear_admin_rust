//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "task_log"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub task_id: Option<i32>,
    pub server_id: Option<i32>,
    pub source_path: Option<String>,
    pub dst_path: Option<String>,
    pub size: Option<i64>,
    pub create_time: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    TaskId,
    ServerId,
    SourcePath,
    DstPath,
    Size,
    CreateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::TaskId => ColumnType::Integer.def().null(),
            Self::ServerId => ColumnType::Integer.def().null(),
            Self::SourcePath => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::DstPath => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::Size => ColumnType::BigInteger.def().null(),
            Self::CreateTime => ColumnType::custom("datetime").def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
