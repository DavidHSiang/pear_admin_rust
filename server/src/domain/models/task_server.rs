//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "task_server"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub server_name: Option<String>,
    pub server_account: Option<String>,
    pub server_password: Option<String>,
    pub server_ip: Option<String>,
    pub port: Option<i32>,
    pub private_key_src: Option<String>,
    pub public_key_src: Option<String>,
    pub conn_type: Option<i32>,
    pub detail: Option<String>,
    pub status: Option<i32>,
    pub create_time: Option<String>,
    pub update_time: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    ServerName,
    ServerAccount,
    ServerPassword,
    ServerIp,
    Port,
    PrivateKeySrc,
    PublicKeySrc,
    ConnType,
    Detail,
    Status,
    CreateTime,
    UpdateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::ServerName => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::ServerAccount => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::ServerPassword => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::ServerIp => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::Port => ColumnType::Integer.def().null(),
            Self::PrivateKeySrc => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::PublicKeySrc => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::ConnType => ColumnType::Integer.def().null(),
            Self::Detail => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::Status => ColumnType::Integer.def().null(),
            Self::CreateTime => ColumnType::custom("datetime").def().null(),
            Self::UpdateTime => ColumnType::custom("datetime").def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
