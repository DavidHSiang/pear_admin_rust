//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "oper_log"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub title: Option<String>,
    pub business_type: Option<i32>,
    pub method: Option<String>,
    pub request_method: Option<String>,
    pub operator_type: Option<i32>,
    pub oper_name: Option<String>,
    pub dept_name: Option<String>,
    pub oper_url: Option<String>,
    pub oper_ip: Option<String>,
    pub oper_location: Option<String>,
    pub oper_param: Option<String>,
    pub json_result: Option<String>,
    pub status: Option<i32>,
    pub error_msg: Option<String>,
    pub oper_time: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Title,
    BusinessType,
    Method,
    RequestMethod,
    OperatorType,
    OperName,
    DeptName,
    OperUrl,
    OperIp,
    OperLocation,
    OperParam,
    JsonResult,
    Status,
    ErrorMsg,
    OperTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Title => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::BusinessType => ColumnType::Integer.def().null(),
            Self::Method => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::RequestMethod => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::OperatorType => ColumnType::Integer.def().null(),
            Self::OperName => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::DeptName => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::OperUrl => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::OperIp => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::OperLocation => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::OperParam => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::JsonResult => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::Status => ColumnType::Integer.def().null(),
            Self::ErrorMsg => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::OperTime => ColumnType::String(StringLen::N(255u32)).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
